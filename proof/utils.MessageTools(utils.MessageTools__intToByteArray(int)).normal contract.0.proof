\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Jan 30 10:45:59 CET 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=wdChecks-wdChecks\\:off , JavaCard-JavaCard\\:on , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , sequences-sequences\\:on , runtimeExceptions-runtimeExceptions\\:allow , integerSimplificationRules-integerSimplificationRules\\:full , Strings-Strings\\:on , reach-reach\\:on , assertions-assertions\\:on , modelFields-modelFields\\:treatAsAxiom , initialisation-initialisation\\:disableStaticInitialisation , wdOperator-wdOperator\\:L , moreSeqRules-moreSeqRules\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Fri Jan 30 10:45:59 CET 2015
name=de.uni.trier.infsec.utils.MessageTools[de.uni.trier.infsec.utils.MessageTools\\:\\:intToByteArray(int)].JML normal_behavior operation contract.0
contract=de.uni.trier.infsec.utils.MessageTools[de.uni.trier.infsec.utils.MessageTools\\:\\:intToByteArray(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "miki" ) (keyVersion "8ba82498c6938c8c5fb8b06e092b978f30dda885"))

(autoModeTime "1027")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "heapAtPre"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "3") (term "1,0,0,1,0,1"))
(rule "assignment" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "nnf_imp2or" (formula "3") (term "0,1,1,1,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "3") (term "0,0,1,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "3"))
(rule "nnf_notAnd" (formula "3") (term "1,0,1,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "3"))
(rule "nnf_notAnd" (formula "3") (term "0,0,0,1,1,1,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "3"))
(rule "nnf_notOr" (formula "3") (term "1,0,0,0,1,1,1,0,0,0,0,1"))
(rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_intToByteArray,savedHeapBefore_intToByteArray"))
(builtin "One Step Simplification" (formula "3"))
(rule "returnUnfold" (formula "3") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x_arr"))
(rule "arrayCreation" (formula "3") (term "1") (inst "#v0=x_arr_1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x_arr_1"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "_tmpArray"))
(rule "compound_byte_cast_expression" (formula "3") (term "1") (inst "#v=x"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x"))
(rule "remove_parentheses_right" (formula "3") (term "1"))
(rule "assignmentUnsignedShiftRightInt" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "narrowingByteCastInt" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "translateJavaCastByte" (formula "3") (term "0,1,0"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "_tmpArray_1"))
(rule "compound_byte_cast_expression" (formula "3") (term "1") (inst "#v=x"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x_1"))
(rule "remove_parentheses_right" (formula "3") (term "1"))
(rule "assignmentUnsignedShiftRightInt" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "narrowingByteCastInt" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "translateJavaCastByte" (formula "3") (term "0,1,0"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "_tmpArray_2"))
(rule "compound_byte_cast_expression" (formula "3") (term "1") (inst "#v=x"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x_2"))
(rule "remove_parentheses_right" (formula "3") (term "1"))
(rule "assignmentUnsignedShiftRightInt" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "narrowingByteCastInt" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "translateJavaCastByte" (formula "3") (term "0,1,0"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "_tmpArray_3"))
(rule "narrowingByteCastInt" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "translateJavaCastByte" (formula "3") (term "0,1,0"))
(rule "arrayCreation" (formula "3") (term "1") (inst "#v0=x_arr_2"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x_arr_2"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "dim0"))
(rule "assignment" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "ifUnfold" (formula "3") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x_3"))
(rule "less_than_comparison_simple" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "less_literals" (formula "3") (term "0,0,1,0"))
(builtin "One Step Simplification" (formula "3"))
(rule "ifSplit" (formula "3"))
(branch "if x_3 true"
   (builtin "One Step Simplification" (formula "4"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "if x_3 false"
   (builtin "One Step Simplification" (formula "4"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "3") (term "1") (inst "#v0=x_arr_3"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "x_arr_3"))
   (rule "variableDeclarationAssign" (formula "3") (term "1"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "length_1"))
   (rule "assignment" (formula "3") (term "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_<createArray>,savedHeapBefore_<createArray>"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "newObject"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "3") (term "1") (inst "#v0=x_arr_4"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "x_arr_4"))
   (rule "variableDeclarationAssign" (formula "3") (term "1"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "length_2"))
   (rule "assignment" (formula "3") (term "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "allocateInstanceWithLength" (formula "3"))
   (builtin "One Step Simplification" (formula "4"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "2"))
   (rule "notLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "blockEmpty" (formula "7") (term "1"))
   (rule "assignment" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "arrayLengthIsAShort" (formula "1") (term "0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "arrayLengthNotNegative" (formula "1") (term "0"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
   (rule "qeq_literals" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "methodCall" (formula "7") (term "1"))
   (branch "Normal Execution (newObject != null )"
      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
      (rule "false_right" (formula "7"))
      (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<createArrayHelper>,savedHeapBefore_<createArrayHelper>"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "assignment_write_attribute_this" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "methodCallWithinClass" (formula "7") (term "1"))
      (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "arrayInitialisation" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "polySimp_elimSub" (formula "7") (term "2,1,0,1,0"))
      (rule "mul_literals" (formula "7") (term "1,2,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "7") (term "2,1,0,1,0"))
      (rule "applyEq" (formula "7") (term "1,2,1,0,1,0") (ifseqformula "1"))
      (rule "add_literals" (formula "7") (term "2,1,0,1,0"))
      (rule "methodCallEmpty" (formula "7") (term "1"))
      (rule "blockEmpty" (formula "7") (term "1"))
      (rule "assignment_write_attribute_this" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "methodCallReturnIgnoreResult" (formula "7") (term "1"))
      (rule "blockEmpty" (formula "7") (term "1"))
      (rule "methodCallReturn" (formula "7") (term "1"))
      (rule "assignment" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "methodCallEmpty" (formula "7") (term "1"))
      (rule "blockEmpty" (formula "7") (term "1"))
      (rule "assignment" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "blockEmpty" (formula "7") (term "1"))
      (rule "assignment" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "assignment_to_primitive_array_component" (formula "7") (term "1"))
      (branch "Normal Execution (x_arr_1 != null)"
         (builtin "One Step Simplification" (formula "8"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
         (rule "qeq_literals" (formula "1") (term "1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_ltToLeq" (formula "1"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "assignment_to_primitive_array_component" (formula "8") (term "1"))
         (branch "Normal Execution (x_arr_1 != null)"
            (builtin "One Step Simplification" (formula "9"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
            (rule "qeq_literals" (formula "1") (term "1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_ltToLeq" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "assignment_to_primitive_array_component" (formula "9") (term "1"))
            (branch "Normal Execution (x_arr_1 != null)"
               (builtin "One Step Simplification" (formula "10"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
               (rule "qeq_literals" (formula "1") (term "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_ltToLeq" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "assignment_to_primitive_array_component" (formula "10") (term "1"))
               (branch "Normal Execution (x_arr_1 != null)"
                  (builtin "One Step Simplification" (formula "11"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
                  (rule "qeq_literals" (formula "1") (term "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_ltToLeq" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "blockEmpty" (formula "11") (term "1"))
                  (rule "assignment" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "5"))
                  (rule "mul_literals" (formula "1") (term "1,0"))
                  (rule "add_literals" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "4"))
                  (rule "mul_literals" (formula "1") (term "1,0"))
                  (rule "add_literals" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                  (rule "mul_literals" (formula "1") (term "1,0"))
                  (rule "add_literals" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
                  (rule "mul_literals" (formula "1") (term "1,0"))
                  (rule "add_literals" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "methodCallReturn" (formula "7") (term "1"))
                  (rule "assignment" (formula "7") (term "1"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "methodCallEmpty" (formula "7") (term "1"))
                  (rule "tryEmpty" (formula "7") (term "1"))
                  (rule "emptyModality" (formula "7") (term "1"))
                  (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "2")) (ifInst ""  (formula "6")))
                  (rule "eqSymm" (formula "7") (term "1,0,0,1"))
                  (rule "dismissNonSelectedField" (formula "7") (term "0,0,1,1,0,0,0,0"))
                  (rule "dismissNonSelectedField" (formula "7") (term "0,0,1,1,0,0,0,0"))
                  (rule "dismissNonSelectedField" (formula "7") (term "0,0,1,1,0,0,0,0"))
                  (rule "dismissNonSelectedField" (formula "7") (term "0,0,1,1,0,0,0,0"))
                  (rule "dismissNonSelectedField" (formula "7") (term "0,0,1,1,0,0,0,0"))
                  (rule "andRight" (formula "7"))
                  (branch
                     (rule "allRight" (formula "7") (inst "sk=o_1"))
                     (rule "orRight" (formula "7"))
                     (rule "orRight" (formula "8"))
                     (rule "orRight" (formula "7"))
                     (rule "orRight" (formula "7"))
                     (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "notRight" (formula "8"))
                     (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=java_lang_Object_created__0"))
                     (rule "simplifySelectOfMemset" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "close" (formula "10") (ifseqformula "2"))
                  )
                  (branch
                     (rule "allRight" (formula "7") (inst "sk=f_0"))
                     (rule "allRight" (formula "7") (inst "sk=o_0"))
                     (rule "orRight" (formula "7"))
                     (rule "pullOutSelect" (formula "8") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "9"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_5"))
                     (rule "simplifySelectOfMemset" (formula "1"))
                     (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_6"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_7"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_8"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_9"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_and" (formula "10") (term "0,0"))
                     (rule "commute_and" (formula "9") (term "0,0"))
                     (rule "commute_and" (formula "8") (term "0,0"))
                     (rule "commute_and" (formula "7") (term "0,0"))
                     (rule "commute_and" (formula "6") (term "0,0"))
                     (rule "commute_and" (formula "4") (term "0,0"))
                     (rule "commute_and" (formula "3") (term "0,0"))
                     (rule "commute_and" (formula "2") (term "0,0"))
                     (rule "commute_and" (formula "1") (term "0,0"))
                     (rule "commute_and" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "commute_and_2" (formula "5") (term "0,1,0,0,0"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "f_0 = java.lang.Object::<created> ∧ o_0 = x_arr_4 TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "replace_known_left" (formula "8") (term "1,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "replace_known_left" (formula "6") (term "0,1,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "2")))
                        (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                        (rule "hideAuxiliaryEq" (formula "6"))
                        (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                        (rule "hideAuxiliaryEq" (formula "7"))
                        (rule "applyEqRigid" (formula "17") (term "2,0") (ifseqformula "1"))
                        (rule "narrowSelectType" (formula "17") (term "0") (ifseqformula "12"))
                        (rule "eqSymm" (formula "17"))
                        (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "applyEqRigid" (formula "7") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                        (rule "hideAuxiliaryEq" (formula "7"))
                        (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "6"))
                        (rule "hideAuxiliaryEq" (formula "6"))
                        (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "2"))
                        (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "11"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "notRight" (formula "12"))
                        (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEqReverse" (formula "11") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "eqSymm" (formula "10"))
                        (rule "close" (formula "10") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.lang.Object::<created> ∧ o_0 = x_arr_4 FALSE"
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "f_0 = java.lang.Object::<transient> ∧ o_0 = x_arr_4 TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "replace_known_left" (formula "8") (term "1,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "replace_known_right" (formula "5") (term "0,1,0,0") (ifseqformula "15"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "10"))
                           (rule "hideAuxiliaryEq" (formula "10"))
                           (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEq" (formula "17") (term "2,0") (ifseqformula "1"))
                           (rule "narrowSelectType" (formula "17") (term "0") (ifseqformula "11"))
                           (rule "eqSymm" (formula "17"))
                           (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                           (rule "hideAuxiliaryEq" (formula "6"))
                           (rule "applyEqRigid" (formula "6") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                           (rule "hideAuxiliaryEq" (formula "6"))
                           (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "6"))
                           (rule "hideAuxiliaryEq" (formula "6"))
                           (rule "applyEqRigid" (formula "4") (term "1,1,0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "eqSymm" (formula "11"))
                           (rule "applyEq" (formula "10") (term "1,0,0,1") (ifseqformula "2"))
                           (rule "replace_known_right" (formula "10") (term "0,1") (ifseqformula "8"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "notRight" (formula "10"))
                           (rule "applyEq" (formula "8") (term "0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "false_right" (formula "8"))
                           (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3"))
                           (rule "close" (formula "9") (ifseqformula "3"))
                        )
                        (branch "f_0 = java.lang.Object::<transient> ∧ o_0 = x_arr_4 FALSE"
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> ∧ o_0 = x_arr_4 TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_left" (formula "8") (term "1,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "replace_known_right" (formula "3") (term "0,1,0,0") (ifseqformula "14"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEq" (formula "3") (term "1,1,0,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "6"))
                              (rule "hideAuxiliaryEq" (formula "6"))
                              (rule "applyEq" (formula "14") (term "1,0,0,1") (ifseqformula "2"))
                              (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "notRight" (formula "14"))
                              (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "13") (term "1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "2"))
                              (rule "narrowSelectType" (formula "12") (term "0") (ifseqformula "6"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "notRight" (formula "12"))
                              (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "false_right" (formula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "false_right" (formula "9"))
                              (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
                              (rule "eqSymm" (formula "4"))
                              (rule "close" (formula "10") (ifseqformula "4"))
                           )
                           (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> ∧ o_0 = x_arr_4 FALSE"
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = x_arr_4 TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "7"))
                                 (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "replace_known_right" (formula "3") (term "0,1,0,0") (ifseqformula "14"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "applyEq" (formula "13") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "false_right" (formula "13"))
                                 (rule "applyEq" (formula "12") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "false_right" (formula "12"))
                                 (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "2"))
                                 (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "applyEq" (formula "3") (term "1,1,0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "applyEq" (formula "10") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "false_right" (formula "10"))
                                 (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "2"))
                                 (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "11"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "notRight" (formula "12"))
                                 (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "applyEqRigid" (formula "12") (term "2,0") (ifseqformula "2"))
                                 (rule "narrowSelectType" (formula "12") (term "0") (ifseqformula "8"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "applyEqReverse" (formula "11") (term "0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "eqSymm" (formula "10"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                 (rule "close" (formula "8") (ifseqformula "1"))
                              )
                              (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = x_arr_4 FALSE"
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "11"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " o_0 = x_arr_4 ∧ ∃ int iv; (iv ≥ 0 ∧ iv ≤ 3 ∧ arr(iv) = f_0) ∧ ¬f_0 = java.lang.Object::<created> TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                    (rule "hideAuxiliaryEq" (formula "5"))
                                    (rule "eqSymm" (formula "4"))
                                    (rule "replace_known_left" (formula "8") (term "1,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "13")))
                                    (rule "false_right" (formula "17"))
                                    (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "applyEqRigid" (formula "6") (term "0,0,0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "applyEq" (formula "16") (term "0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "false_right" (formula "16"))
                                    (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "false_right" (formula "14"))
                                    (rule "applyEq" (formula "14") (term "0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "false_right" (formula "14"))
                                    (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "false_right" (formula "13"))
                                    (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "1"))
                                    (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "notRight" (formula "15"))
                                    (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "applyEqRigid" (formula "16") (term "2,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "2"))
                                    (rule "narrowSelectArrayType" (formula "16") (term "0") (ifseqformula "12") (ifseqformula "15"))
                                    (rule "eqSymm" (formula "16"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                    (rule "close" (formula "14") (ifseqformula "1"))
                                 )
                                 (branch " o_0 = x_arr_4 ∧ ∃ int iv; (iv ≥ 0 ∧ iv ≤ 3 ∧ arr(iv) = f_0) ∧ ¬f_0 = java.lang.Object::<created> FALSE"
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch "f_0 = arr(0) ∧ o_0 = x_arr_4 TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "14"))
                                       (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")))
                                       (rule "applyEq" (formula "13") (term "0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "13"))
                                       (rule "false_right" (formula "13"))
                                       (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "equal_literals" (formula "5") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "applyEqReverse" (formula "17") (term "1") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "2"))
                                       (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "14"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "notRight" (formula "15"))
                                       (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "equal_literals" (formula "5") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "equal_literals" (formula "4") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "applyEqReverse" (formula "15") (term "1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "castDel" (formula "8") (term "0,1"))
                                       (rule "castDel" (formula "8") (term "0,0"))
                                       (rule "leq_literals" (formula "8") (term "1"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "qeq_literals" (formula "8"))
                                       (rule "closeTrue" (formula "8"))
                                    )
                                    (branch "f_0 = arr(0) ∧ o_0 = x_arr_4 FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch "f_0 = arr(1) ∧ o_0 = x_arr_4 TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                          (rule "hideAuxiliaryEq" (formula "3"))
                                          (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "replace_known_right" (formula "10") (term "0,1") (ifseqformula "14"))
                                          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "2")))
                                          (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "14"))
                                          (rule "false_right" (formula "14"))
                                          (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "9"))
                                          (rule "equal_literals" (formula "9"))
                                          (rule "false_right" (formula "9"))
                                          (rule "applyEq" (formula "12") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "false_right" (formula "12"))
                                          (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "equal_literals" (formula "3") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                          (rule "hideAuxiliaryEq" (formula "3"))
                                          (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "equal_literals" (formula "3") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "applyEqReverse" (formula "14") (term "1") (ifseqformula "3"))
                                          (rule "hideAuxiliaryEq" (formula "3"))
                                          (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "false_right" (formula "8"))
                                          (rule "applyEq" (formula "8") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "false_right" (formula "8"))
                                          (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "castDel" (formula "7") (term "0,1"))
                                          (rule "castDel" (formula "7") (term "0,0"))
                                          (rule "leq_literals" (formula "7") (term "1"))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (rule "qeq_literals" (formula "7"))
                                          (rule "closeTrue" (formula "7"))
                                       )
                                       (branch "f_0 = arr(1) ∧ o_0 = x_arr_4 FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch "f_0 = arr(2) ∧ o_0 = x_arr_4 TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "14"))
                                             (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "8"))
                                             (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "9"))
                                             (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "13"))
                                             (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")))
                                             (rule "applyEq" (formula "13") (term "0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "13"))
                                             (rule "false_right" (formula "13"))
                                             (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "10"))
                                             (rule "castDel" (formula "10") (term "0,0"))
                                             (rule "castDel" (formula "10") (term "0,1"))
                                             (rule "qeq_literals" (formula "10") (term "0"))
                                             (builtin "One Step Simplification" (formula "10"))
                                             (rule "leq_literals" (formula "10"))
                                             (rule "closeTrue" (formula "10"))
                                          )
                                          (branch "f_0 = arr(2) ∧ o_0 = x_arr_4 FALSE"
                                             (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch "f_0 = arr(3) ∧ o_0 = x_arr_4 TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "8"))
                                                (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "7"))
                                                (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "9"))
                                                (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")))
                                                (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "9"))
                                                (rule "equal_literals" (formula "9"))
                                                (rule "false_right" (formula "9"))
                                                (rule "applyEq" (formula "11") (term "0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "false_right" (formula "11"))
                                                (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "false_right" (formula "12"))
                                                (rule "applyEqRigid" (formula "9") (term "1,1,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "9"))
                                                (rule "castDel" (formula "9") (term "0,1"))
                                                (rule "castDel" (formula "9") (term "0,0"))
                                                (rule "leq_literals" (formula "9") (term "1"))
                                                (builtin "One Step Simplification" (formula "9"))
                                                (rule "qeq_literals" (formula "9"))
                                                (rule "closeTrue" (formula "9"))
                                             )
                                             (branch "f_0 = arr(3) ∧ o_0 = x_arr_4 FALSE"
                                                (rule "close" (formula "18") (ifseqformula "1"))
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
               (branch "Null Reference (x_arr_1 = null)"
                  (builtin "One Step Simplification" (formula "11"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (x_arr_1 != null, but 3 Out of Bounds!)"
                  (builtin "One Step Simplification" (formula "11"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
                  (rule "less_literals" (formula "1") (term "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "5"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Null Reference (x_arr_1 = null)"
               (builtin "One Step Simplification" (formula "10"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Index Out of Bounds (x_arr_1 != null, but 2 Out of Bounds!)"
               (builtin "One Step Simplification" (formula "10"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
               (rule "less_literals" (formula "1") (term "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "4"))
               (rule "mul_literals" (formula "3") (term "1,0"))
               (rule "add_literals" (formula "3") (term "0"))
               (rule "leq_literals" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
               (rule "mul_literals" (formula "2") (term "1,0"))
               (rule "add_literals" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Null Reference (x_arr_1 = null)"
            (builtin "One Step Simplification" (formula "9"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Index Out of Bounds (x_arr_1 != null, but 1 Out of Bounds!)"
            (builtin "One Step Simplification" (formula "9"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
            (rule "less_literals" (formula "1") (term "1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (x_arr_1 = null)"
         (builtin "One Step Simplification" (formula "8"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (x_arr_1 != null, but 0 Out of Bounds!)"
         (builtin "One Step Simplification" (formula "8"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
         (rule "less_literals" (formula "1") (term "1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
         (rule "leq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (newObject = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
