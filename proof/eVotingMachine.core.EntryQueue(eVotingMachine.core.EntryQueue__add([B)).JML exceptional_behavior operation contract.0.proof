\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Sep 25 21:40:32 CEST 2014
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=wdChecks-wdChecks\\:off , JavaCard-JavaCard\\:on , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , sequences-sequences\\:on , runtimeExceptions-runtimeExceptions\\:allow , integerSimplificationRules-integerSimplificationRules\\:full , Strings-Strings\\:on , reach-reach\\:on , assertions-assertions\\:on , modelFields-modelFields\\:showSatisfiability , initialisation-initialisation\\:disableStaticInitialisation , wdOperator-wdOperator\\:L , optimisedSelectRules-optimisedSelectRules\\:on
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Thu Sep 25 21:40:32 CEST 2014
name=de.uni.trier.infsec.eVotingMachine.core.EntryQueue[de.uni.trier.infsec.eVotingMachine.core.EntryQueue\\:\\:add([B)].JML exceptional_behavior operation contract.0
contract=de.uni.trier.infsec.eVotingMachine.core.EntryQueue[de.uni.trier.infsec.eVotingMachine.core.EntryQueue\\:\\:add([B)].JML exceptional_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "miki" ) (keyVersion "c781f49facff0f907c1d2349143b682c313d0e46"))

(autoModeTime "1220")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "assignment" (formula "9") (term "1"))
(builtin "One Step Simplification" (formula "9"))
(rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_add,savedHeapBefore_add"))
(builtin "One Step Simplification" (formula "9"))
(rule "variableDeclarationAssign" (formula "9") (term "1"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "newEntry"))
(builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_Node,self_0,exc_0,heapAfter_Node,anon_heap_Node") (contract "de.uni.trier.infsec.eVotingMachine.core.EntryQueue.Node[de.uni.trier.infsec.eVotingMachine.core.EntryQueue.Node::Node([B)].JML normal_behavior operation contract.0"))
(branch "Post (Node)"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,1,0,1,0") (ifseqformula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "10"))
   (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "15"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "assignment" (formula "19") (term "1"))
   (builtin "One Step Simplification" (formula "19"))
   (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=de_uni_trier_infsec_eVotingMachine_core_EntryQueue_Node_next_0"))
   (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "17")) (ifInst ""  (formula "16")))
   (rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "13"))
   (rule "hideAuxiliaryEq" (formula "13"))
   (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=de_uni_trier_infsec_eVotingMachine_core_EntryQueue_Node_entry_0"))
   (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "17")) (ifInst ""  (formula "16")))
   (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "12"))
   (rule "hideAuxiliaryEq" (formula "12"))
   (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "19") (term "1") (newnames "x"))
   (rule "compound_equality_comparison_1" (formula "19") (term "1") (inst "#v0=n"))
   (rule "variableDeclarationAssign" (formula "19") (term "1"))
   (rule "variableDeclaration" (formula "19") (term "1") (newnames "n"))
   (rule "assignment_read_attribute_this" (formula "19") (term "1"))
   (builtin "One Step Simplification" (formula "19"))
   (rule "pullOutSelect" (formula "19") (term "0,1,0") (inst "selectSK=de_uni_trier_infsec_eVotingMachine_core_EntryQueue_head_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "3")))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "20") (term "0,1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "equality_comparison_simple" (formula "19") (term "1"))
   (builtin "One Step Simplification" (formula "19"))
   (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "18"))
   (builtin "One Step Simplification" (formula "19"))
   (rule "ifElseSplit" (formula "19"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "20"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "20"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "eval_order_access1" (formula "19") (term "1") (inst "#v0=n"))
      (rule "variableDeclarationAssign" (formula "19") (term "1"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "n_1"))
      (rule "assignment_read_attribute_this" (formula "19") (term "1"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "pullOutSelect" (formula "19") (term "0,1,0") (inst "selectSK=de_uni_trier_infsec_eVotingMachine_core_EntryQueue_last_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "3")))
      (rule "assignment_write_attribute" (formula "20") (term "1"))
      (branch "Normal Execution (n_1 != null)"
         (builtin "One Step Simplification" (formula "21"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "assignment_write_attribute_this" (formula "21") (term "1"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "7"))
         (rule "elementOfUnion" (formula "1") (term "0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "21") (term "1,0,0,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "20"))
         (rule "closeTrue" (formula "20"))
      )
      (branch "Null Reference (n_1 = null)"
         (builtin "One Step Simplification" (formula "21"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "1"))
         (rule "ifEqualsNull" (formula "2"))
         (rule "replace_known_left" (formula "2") (term "1,1") (ifseqformula "8"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "elementOfUnion" (formula "2") (term "0,0"))
         (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "elementOfSingleton" (formula "2") (term "0,0"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "notLeft" (formula "2"))
         (rule "elementOfUnion" (formula "16"))
         (rule "orRight" (formula "16"))
         (rule "elementOfSingleton" (formula "17"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "false_right" (formula "17"))
         (rule "elementOfSingleton" (formula "16"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "false_right" (formula "16"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "2"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0") (ifseqformula "3"))
         (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "0") (ifseqformula "9"))
         (rule "applyEq" (formula "14") (term "1,0,1") (ifseqformula "15"))
         (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "15"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "0") (ifseqformula "9"))
         (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "17"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "throwUnfold" (formula "22") (term "1") (inst "#v0=n"))
         (rule "variableDeclarationAssign" (formula "22") (term "1"))
         (rule "variableDeclaration" (formula "22") (term "1") (newnames "n_2"))
         (builtin "Use Operation Contract" (formula "22") (newnames "heapBefore_NullPointerException,self_1,exc_1,heapAfter_NullPointerException,anon_heap_NullPointerException") (contract "java.lang.NullPointerException[java.lang.NullPointerException::NullPointerException()].JML normal_behavior operation contract.0"))
         (branch "Post (NullPointerException)"
            (builtin "One Step Simplification" (formula "19"))
            (builtin "One Step Simplification" (formula "24"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,0,1,0,1,0,1") (ifseqformula "10"))
            (rule "andLeft" (formula "19"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,1,0,1,0") (ifseqformula "19"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1,1,0,1,0") (ifseqformula "10"))
            (rule "andLeft" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "21"))
            (rule "andLeft" (formula "23"))
            (rule "andLeft" (formula "21"))
            (rule "andLeft" (formula "24"))
            (rule "notLeft" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "notLeft" (formula "21"))
            (rule "orRight" (formula "26"))
            (rule "replace_known_right" (formula "21") (term "1,0") (ifseqformula "27"))
            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "26")))
            (rule "assignment" (formula "33") (term "1"))
            (builtin "One Step Simplification" (formula "33"))
            (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=java_lang_Throwable_cause_0"))
            (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "19"))
            (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "29")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1,0,0") (ifseqformula "10"))
            (rule "replace_known_right" (formula "24") (term "0,0,1,0,0") (ifseqformula "27"))
            (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "28")))
            (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "24"))
            (rule "hideAuxiliaryEq" (formula "24"))
            (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=java_lang_Throwable_message_0"))
            (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "19"))
            (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "29")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,1,0,0") (ifseqformula "10"))
            (rule "replace_known_right" (formula "23") (term "0,0,1,0,0") (ifseqformula "27"))
            (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "28")))
            (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "23"))
            (rule "hideAuxiliaryEq" (formula "23"))
            (rule "commuteUnion" (formula "19") (term "1,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0") (ifseqformula "18"))
            (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0") (ifseqformula "18"))
            (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "24"))
            (builtin "One Step Simplification" (formula "23"))
            (rule "true_left" (formula "23"))
            (rule "methodCallThrow" (formula "33") (term "1"))
            (builtin "One Step Simplification" (formula "33"))
            (rule "tryCatchThrow" (formula "33") (term "1"))
            (rule "ifElseUnfold" (formula "33") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "33") (term "1") (newnames "x_1"))
            (rule "equality_comparison_simple" (formula "33") (term "1"))
            (builtin "One Step Simplification" (formula "33"))
            (rule "replace_known_right" (formula "33") (term "0,0,1,0") (ifseqformula "28"))
            (builtin "One Step Simplification" (formula "33"))
            (rule "ifElseSplit" (formula "33"))
            (branch "if x_1 true"
               (builtin "One Step Simplification" (formula "34"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_1 false"
               (builtin "One Step Simplification" (formula "34"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "ifElseSplit" (formula "33"))
               (branch "if n_2 instanceof java.lang.Throwable true"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                  (rule "true_left" (formula "1"))
                  (rule "variableDeclaration" (formula "33") (term "1") (newnames "e"))
                  (rule "reference_type_cast" (formula "33") (term "1"))
                  (branch "Normal Execution (n_2 instanceof java.lang.Throwable)"
                     (builtin "One Step Simplification" (formula "34"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "assignment" (formula "33") (term "1"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "emptyModality" (formula "33") (term "1"))
                     (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "28")))
                     (rule "allRight" (formula "33") (inst "sk=f_0"))
                     (rule "allRight" (formula "33") (inst "sk=o_0"))
                     (rule "orRight" (formula "33"))
                     (rule "eqSymm" (formula "34"))
                     (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "11"))
                     (rule "eqSymm" (formula "35"))
                     (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                     (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "commute_and" (formula "1") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "1,0,0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "0,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "1,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
                     (rule "commute_and_2" (formula "1") (term "0,0,0"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "2") (term "1,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0"))
                     (rule "commute_or" (formula "2") (term "1,0,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "shift_paren_and" (formula "1") (term "0,0,0,0"))
                     (rule "commute_and_2" (formula "1") (term "0,0"))
                     (rule "commute_and_2" (formula "1") (term "0,0,0"))
                     (rule "commute_and_2" (formula "1") (term "0,0,0,0"))
                     (rule "commute_and" (formula "1") (term "0,0,0,0,0"))
                     (rule "commute_and_2" (formula "1") (term "0,0,0,0"))
                     (rule "shift_paren_and" (formula "2") (term "0,0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0,0"))
                     (rule "commute_and" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "commute_and_2" (formula "2") (term "0,0,0,0,0"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch " ¬f_0 = <created> ∧ o_0 = self_0 ∧ (f_0 = entry ∨ f_0 = next) ∧ (f_0 = entry ∨ o_0 = self_0) ∧ (f_0 = next ∨ o_0 = self_0) TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "replace_known_right" (formula "5") (term "0,0,0,0,0,0,0,0") (ifseqformula "31"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEq" (formula "37") (term "1,0,0,1") (ifseqformula "1"))
                        (rule "replace_known_right" (formula "37") (term "0,1") (ifseqformula "33"))
                        (builtin "One Step Simplification" (formula "37"))
                        (rule "notRight" (formula "37"))
                        (rule "replace_known_left" (formula "4") (term "0,0,1,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "2"))
                        (rule "close" (formula "35") (ifseqformula "2"))
                     )
                     (branch " ¬f_0 = <created> ∧ o_0 = self_0 ∧ (f_0 = entry ∨ f_0 = next) ∧ (f_0 = entry ∨ o_0 = self_0) ∧ (f_0 = next ∨ o_0 = self_0) FALSE"
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch " ¬f_0 = <created> ∧ o_0 = self_1 ∧ (f_0 = cause ∨ f_0 = message) ∧ (f_0 = cause ∨ o_0 = self_1) ∧ (f_0 = message ∨ o_0 = self_1) ∨ ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_Node«anonHeapFunction» = TRUE) TRUE"
                           (rule "applyEqReverse" (formula "37") (term "1") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "eqSymm" (formula "36"))
                           (rule "cut_direct" (formula "7") (term "0"))
                           (branch "CUT: entry = null TRUE"
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "7"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "applyEq" (formula "15") (term "1") (ifseqformula "7"))
                              (rule "cut_direct" (formula "34") (term "0,0"))
                              (branch "CUT: o_0 = null TRUE"
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "false_right" (formula "35"))
                                 (rule "replace_known_left" (formula "2") (term "0,0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "replace_known_right" (formula "29") (term "0,0,0,0,0") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "applyEq" (formula "37") (term "1,1") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "37") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                 (rule "close" (formula "32") (ifseqformula "1"))
                              )
                              (branch "CUT: o_0 = null FALSE"
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "notRight" (formula "35"))
                                 (rule "replace_known_left" (formula "2") (term "0,0,1,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "35")))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "replace_known_right" (formula "29") (term "0,0,0,0,0") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "29"))
                                 (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "37") (term "0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                 (rule "close" (formula "30") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: entry = null FALSE"
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "cut_direct" (formula "36") (term "0,0"))
                              (branch "CUT: o_0 = null TRUE"
                                 (builtin "One Step Simplification" (formula "37"))
                                 (rule "false_right" (formula "37"))
                                 (rule "replace_known_left" (formula "2") (term "0,0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "replace_known_right" (formula "31") (term "0,0,0,0,0") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "applyEqRigid" (formula "39") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "39") (term "1,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                 (rule "close" (formula "34") (ifseqformula "1"))
                              )
                              (branch "CUT: o_0 = null FALSE"
                                 (builtin "One Step Simplification" (formula "37"))
                                 (rule "notRight" (formula "37"))
                                 (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "replace_known_right" (formula "31") (term "0,0,0,0,0") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                 (rule "close" (formula "32") (ifseqformula "1"))
                              )
                           )
                        )
                        (branch " ¬f_0 = <created> ∧ o_0 = self_1 ∧ (f_0 = cause ∨ f_0 = message) ∧ (f_0 = cause ∨ o_0 = self_1) ∧ (f_0 = message ∨ o_0 = self_1) ∨ ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_Node«anonHeapFunction» = TRUE) FALSE"
                           (rule "close" (formula "37") (ifseqformula "1"))
                        )
                     )
                  )
                  (branch "ClassCastException (!(n_2 instanceof java.lang.Throwable))"
                     (builtin "One Step Simplification" (formula "34"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "closeTrue" (formula "33"))
                  )
               )
               (branch "if n_2 instanceof java.lang.Throwable false"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "Exceptional Post (NullPointerException)"
            (builtin "One Step Simplification" (formula "19"))
            (builtin "One Step Simplification" (formula "24"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,0,1,0,1,0,1") (ifseqformula "10"))
            (rule "andLeft" (formula "19"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,0,0") (ifseqformula "19"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1,0,0") (ifseqformula "10"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,1,0,1,0") (ifseqformula "19"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1,1,0,1,0") (ifseqformula "10"))
            (rule "andLeft" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "20"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "24"))
            (rule "notLeft" (formula "20"))
            (rule "close" (formula "26") (ifseqformula "25"))
         )
         (branch "Pre (NullPointerException)"
            (builtin "One Step Simplification" (formula "22"))
            (rule "wellFormedAnonEQ" (formula "22") (ifseqformula "10"))
            (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "3")))
            (rule "closeTrue" (formula "22"))
         )
      )
   )
)
(branch "Exceptional Post (Node)"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0,0") (ifseqformula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,1,0,1,0") (ifseqformula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "9"))
   (rule "close" (formula "16") (ifseqformula "15"))
)
(branch "Pre (Node)"
   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "1")) (ifInst ""  (formula "4")))
   (rule "closeTrue" (formula "9"))
)
)

}
