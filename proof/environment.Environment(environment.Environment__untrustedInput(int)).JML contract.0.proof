\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Feb 02 15:50:51 CET 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=80000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Mon Feb 02 15:50:51 CET 2015
name=de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment\\:\\:untrustedInput(int)].JML behavior operation contract.0
contract=de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment\\:\\:untrustedInput(int)].JML behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "kirsten" ) (keyVersion "31a2f66d4110d575b74cc5815e7ca260a8d03cf2"))

(autoModeTime "6445")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "heapAtPre"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "3") (term "1,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "3") (term "0,0,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "3") (term "1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "3") (term "0,1,0,0,0,1"))
(rule "assignment" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "3") (term "1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "3") (term "1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "3") (term "0,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,1,1,0,0,0,1"))
(rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_untrustedInput,savedHeapBefore_untrustedInput,_nBefore_untrustedInput"))
(builtin "One Step Simplification" (formula "3"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "res"))
(rule "assignment" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(builtin "Loop Invariant" (formula "3") (newnames "variant,b,heapBefore_LOOP,resBefore_LOOP,res_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
(branch "Invariant Initially Valid"
   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "3"))
)
(branch "Body Preserves Invariant"
   (builtin "One Step Simplification" (formula "4"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "4"))
   (rule "impRight" (formula "4"))
   (rule "eqSymm" (formula "5") (term "1,0,0,1,1,0,1"))
   (rule "elementOfSingleton" (formula "5") (term "0,0,0,0,1,1,0,1"))
   (rule "variableDeclarationAssign" (formula "1") (term "1"))
   (rule "variableDeclarationAssign" (formula "5") (term "1"))
   (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "exc_1"))
   (rule "assignment" (formula "5") (term "1"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "thrownExc"))
   (rule "blockThrow" (formula "5") (term "1,0,0,1"))
   (rule "boxToDiamond" (formula "1") (term "1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "compound_assignment_5_nonsimple" (formula "4") (term "1"))
   (rule "ifUnfold" (formula "5") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "x_1"))
   (rule "compound_assignment_5_nonsimple" (formula "5") (term "1"))
   (rule "ifElseUnfold" (formula "4") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "x_2"))
   (rule "less_than_comparison_simple" (formula "4") (term "1"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,0"))
   (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "4") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,1,0"))
   (rule "mul_literals" (formula "4") (term "1,0,0,1,0"))
   (rule "ifElseUnfold" (formula "5") (term "1") (inst "#boolv=x_2"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "x_3"))
   (rule "less_than_comparison_simple" (formula "5") (term "1"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,0"))
   (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "5") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,1,0"))
   (rule "mul_literals" (formula "5") (term "1,0,0,1,0"))
   (rule "ifElseSplit" (formula "4"))
   (branch "if x_2 true"
      (builtin "One Step Simplification" (formula "5"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "replace_known_left" (formula "6") (term "0,0,1,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "assignment" (formula "5") (term "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "methodCallEmpty" (formula "5") (term "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "emptyModality" (formula "5") (term "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "false_right" (formula "5"))
      (rule "ifElseSplit" (formula "5"))
      (branch "if x_3 true"
         (builtin "One Step Simplification" (formula "6"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "ifEnterThen" (formula "5") (term "1"))
         (rule "assignment" (formula "5") (term "1"))
         (builtin "One Step Simplification" (formula "5"))
         (builtin "Use Operation Contract" (formula "5") (newnames "heapBefore_untrustedInput_1,result_1,exc_2,heapAfter_untrustedInput_0,anon_heap_untrustedInput_0") (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::untrustedInput()].JML behavior operation contract.0"))
         (branch "Post (untrustedInput)"
            (builtin "One Step Simplification" (formula "7"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "andLeft" (formula "7"))
            (rule "typeEqDerived" (formula "8") (term "0,0,1") (ifseqformula "7"))
            (rule "typeEqDerived" (formula "8") (term "0,1,1") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
            (rule "true_left" (formula "8"))
            (rule "assignment" (formula "8") (term "1"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "tryEmpty" (formula "8") (term "1"))
            (rule "methodCallEmpty" (formula "8") (term "1"))
            (rule "emptyModality" (formula "8") (term "1"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "allRight" (formula "8") (inst "sk=f_4"))
            (rule "allRight" (formula "8") (inst "sk=o_4"))
            (rule "orRight" (formula "8"))
            (rule "orRight" (formula "8"))
            (rule "eqSymm" (formula "10"))
            (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=f_4_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "11"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_4_1"))
            (rule "simplifySelectOfAnon" (formula "1"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "10"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "commute_and" (formula "9"))
            (rule "ifthenelse_split" (formula "1") (term "0"))
            (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "orRight" (formula "9"))
               (rule "applyEqReverse" (formula "14") (term "1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "eqSymm" (formula "13"))
               (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "8")))
               (rule "closeTrue" (formula "12"))
            )
            (branch " ¬o_4 = null ∧ ¬( o_4.<created> = TRUE ∨ o_4.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
               (rule "close" (formula "12") (ifseqformula "1"))
            )
         )
         (branch "Exceptional Post (untrustedInput)"
            (builtin "One Step Simplification" (formula "7"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,0") (ifseqformula "6"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "notLeft" (formula "7"))
            (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "tryCatchThrow" (formula "10") (term "1"))
            (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_6"))
            (rule "equality_comparison_simple" (formula "10") (term "1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "replace_known_right" (formula "10") (term "0,0,1,0") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "ifElseSplit" (formula "10"))
            (branch "if x_6 true"
               (builtin "One Step Simplification" (formula "11"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_6 false"
               (builtin "One Step Simplification" (formula "11"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "ifElseSplit" (formula "10"))
               (branch "if exc_2 instanceof java.lang.Throwable true"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
                  (rule "true_left" (formula "1"))
                  (rule "variableDeclaration" (formula "10") (term "1") (newnames "e_2"))
                  (rule "reference_type_cast" (formula "10") (term "1"))
                  (branch "Normal Execution (exc_2 instanceof java.lang.Throwable)"
                     (builtin "One Step Simplification" (formula "11"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "assignment" (formula "10") (term "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "assignment" (formula "10") (term "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "methodCallEmpty" (formula "10") (term "1"))
                     (rule "emptyModality" (formula "10") (term "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "methodCallParamThrow" (formula "10") (term "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "tryCatchThrow" (formula "10") (term "1"))
                     (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_7"))
                     (rule "equality_comparison_simple" (formula "10") (term "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "replace_known_right" (formula "10") (term "0,0,1,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "ifElseSplit" (formula "10"))
                     (branch "if x_7 true"
                        (builtin "One Step Simplification" (formula "11"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_7 false"
                        (builtin "One Step Simplification" (formula "11"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "ifElseSplit" (formula "10"))
                        (branch "if thrownExc instanceof java.lang.Throwable true"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
                           (rule "true_left" (formula "1"))
                           (rule "variableDeclaration" (formula "10") (term "1") (newnames "e_3"))
                           (rule "reference_type_cast" (formula "10") (term "1"))
                           (branch "Normal Execution (thrownExc instanceof java.lang.Throwable)"
                              (builtin "One Step Simplification" (formula "11"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "assignment" (formula "10") (term "1"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "emptyModality" (formula "10") (term "1"))
                              (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")) (ifInst ""  (formula "9")) (ifInst ""  (formula "8")))
                              (rule "allRight" (formula "10") (inst "sk=f_3"))
                              (rule "allRight" (formula "10") (inst "sk=o_3"))
                              (rule "orRight" (formula "10"))
                              (rule "orRight" (formula "10"))
                              (rule "eqSymm" (formula "12"))
                              (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=f_3_0"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "7"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "eqSymm" (formula "13"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_3_1"))
                              (rule "simplifySelectOfAnon" (formula "1"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "commute_and" (formula "11"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch " ¬o_3 = null ∧ ¬( o_3.<created> = TRUE ∨ o_3.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "orRight" (formula "11"))
                                 (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "15"))
                                 (rule "replace_known_right" (formula "13") (term "1") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "false_right" (formula "13"))
                                 (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "10")))
                                 (rule "closeTrue" (formula "13"))
                              )
                              (branch " ¬o_3 = null ∧ ¬( o_3.<created> = TRUE ∨ o_3.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                                 (rule "close" (formula "14") (ifseqformula "1"))
                              )
                           )
                           (branch "ClassCastException (!(thrownExc instanceof java.lang.Throwable))"
                              (builtin "One Step Simplification" (formula "11"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "closeTrue" (formula "10"))
                           )
                        )
                        (branch "if thrownExc instanceof java.lang.Throwable false"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "ClassCastException (!(exc_2 instanceof java.lang.Throwable))"
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "closeTrue" (formula "10"))
                  )
               )
               (branch "if exc_2 instanceof java.lang.Throwable false"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "Pre (untrustedInput)"
            (builtin "One Step Simplification" (formula "5"))
            (rule "wellFormedAnon" (formula "5"))
            (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "4"))
            (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "2")))
            (rule "closeTrue" (formula "5"))
         )
      )
      (branch "if x_3 false"
         (builtin "One Step Simplification" (formula "6"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "if x_2 false"
      (builtin "One Step Simplification" (formula "5"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "replace_known_right" (formula "6") (term "0,0,1,0") (ifseqformula "4"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_leqRight" (formula "4"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "greater_equal_than_comparison_simple" (formula "5") (term "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "methodCallEmpty" (formula "5") (term "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "emptyModality" (formula "5") (term "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "notRight" (formula "5"))
      (rule "ifElseSplit" (formula "6"))
      (branch "if x_3 true"
         (builtin "One Step Simplification" (formula "7"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_3 false"
         (builtin "One Step Simplification" (formula "7"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "greater_equal_than_comparison_simple" (formula "6") (term "1"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "replace_known_left" (formula "6") (term "0,0,1,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "blockEmpty" (formula "6") (term "1"))
         (rule "ifSplit" (formula "6"))
         (branch "if x_1 true"
            (builtin "One Step Simplification" (formula "7"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (builtin "Use Operation Contract" (formula "6") (newnames "heapBefore_untrustedInput_0,result_0,exc_0,heapAfter_untrustedInput,anon_heap_untrustedInput") (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::untrustedInput()].JML behavior operation contract.0"))
            (branch "Post (untrustedInput)"
               (builtin "One Step Simplification" (formula "7"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "8"))
               (rule "typeEqDerived" (formula "9") (term "0,0,1") (ifseqformula "8"))
               (rule "typeEqDerived" (formula "9") (term "0,1,1") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")))
               (rule "true_left" (formula "9"))
               (rule "assignment" (formula "9") (term "1"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "tryEmpty" (formula "9") (term "1"))
               (rule "methodCallEmpty" (formula "9") (term "1"))
               (rule "emptyModality" (formula "9") (term "1"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "allRight" (formula "9") (inst "sk=f_2"))
               (rule "allRight" (formula "9") (inst "sk=o_2"))
               (rule "orRight" (formula "9"))
               (rule "orRight" (formula "9"))
               (rule "eqSymm" (formula "11"))
               (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=f_2_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "eqSymm" (formula "12"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_2_1"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "commute_and" (formula "10"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "orRight" (formula "10"))
                  (rule "applyEqReverse" (formula "15") (term "1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "14"))
                  (rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
                  (rule "closeTrue" (formula "13"))
               )
               (branch " ¬o_2 = null ∧ ¬( o_2.<created> = TRUE ∨ o_2.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                  (rule "close" (formula "13") (ifseqformula "1"))
               )
            )
            (branch "Exceptional Post (untrustedInput)"
               (builtin "One Step Simplification" (formula "8"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,0") (ifseqformula "7"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "notLeft" (formula "8"))
               (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "tryCatchThrow" (formula "11") (term "1"))
               (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_4"))
               (rule "equality_comparison_simple" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "replace_known_right" (formula "11") (term "0,0,1,0") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "ifElseSplit" (formula "11"))
               (branch "if x_4 true"
                  (builtin "One Step Simplification" (formula "12"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_4 false"
                  (builtin "One Step Simplification" (formula "12"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "ifElseSplit" (formula "11"))
                  (branch "if exc_0 instanceof java.lang.Throwable true"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                     (rule "true_left" (formula "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "e"))
                     (rule "reference_type_cast" (formula "11") (term "1"))
                     (branch "Normal Execution (exc_0 instanceof java.lang.Throwable)"
                        (builtin "One Step Simplification" (formula "12"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "assignment" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "assignment" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "methodCallEmpty" (formula "11") (term "1"))
                        (rule "emptyModality" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "methodCallParamThrow" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "tryCatchThrow" (formula "11") (term "1"))
                        (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=x"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_5"))
                        (rule "equality_comparison_simple" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "replace_known_right" (formula "11") (term "0,0,1,0") (ifseqformula "10"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "ifElseSplit" (formula "11"))
                        (branch "if x_5 true"
                           (builtin "One Step Simplification" (formula "12"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_5 false"
                           (builtin "One Step Simplification" (formula "12"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "ifElseSplit" (formula "11"))
                           (branch "if thrownExc instanceof java.lang.Throwable true"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                              (rule "true_left" (formula "1"))
                              (rule "variableDeclaration" (formula "11") (term "1") (newnames "e_1"))
                              (rule "reference_type_cast" (formula "11") (term "1"))
                              (branch "Normal Execution (thrownExc instanceof java.lang.Throwable)"
                                 (builtin "One Step Simplification" (formula "12"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "assignment" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "emptyModality" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")) (ifInst ""  (formula "9")))
                                 (rule "allRight" (formula "11") (inst "sk=f_1"))
                                 (rule "allRight" (formula "11") (inst "sk=o_1"))
                                 (rule "orRight" (formula "11"))
                                 (rule "orRight" (formula "11"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=f_1_0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "eqSymm" (formula "14"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "12"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_1"))
                                 (rule "simplifySelectOfAnon" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "commute_and" (formula "12"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "12"))
                                    (rule "applyEqReverse" (formula "17") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "16"))
                                    (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "false_right" (formula "14"))
                                    (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "10")))
                                    (rule "closeTrue" (formula "14"))
                                 )
                                 (branch " ¬o_1 = null ∧ ¬( o_1.<created> = TRUE ∨ o_1.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                                    (rule "close" (formula "15") (ifseqformula "1"))
                                 )
                              )
                              (branch "ClassCastException (!(thrownExc instanceof java.lang.Throwable))"
                                 (builtin "One Step Simplification" (formula "12"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "closeTrue" (formula "11"))
                              )
                           )
                           (branch "if thrownExc instanceof java.lang.Throwable false"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                     (branch "ClassCastException (!(exc_0 instanceof java.lang.Throwable))"
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "closeTrue" (formula "11"))
                     )
                  )
                  (branch "if exc_0 instanceof java.lang.Throwable false"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Pre (untrustedInput)"
               (builtin "One Step Simplification" (formula "6"))
               (rule "wellFormedAnon" (formula "6"))
               (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "3")))
               (rule "closeTrue" (formula "6"))
            )
         )
         (branch "if x_1 false"
            (builtin "One Step Simplification" (formula "7"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
)
(branch "Use Case"
   (builtin "One Step Simplification" (formula "4"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "4"))
   (rule "variableDeclarationAssign" (formula "4") (term "1"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "b_1"))
   (rule "compound_assignment_5_nonsimple" (formula "4") (term "1"))
   (rule "ifElseUnfold" (formula "4") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "x"))
   (rule "less_than_comparison_simple" (formula "4") (term "1"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,0"))
   (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "4") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,1,0"))
   (rule "mul_literals" (formula "4") (term "1,0,0,1,0"))
   (rule "ifElseSplit" (formula "4"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "5"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "assignment" (formula "5") (term "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "methodCallEmpty" (formula "5") (term "1"))
      (rule "emptyModality" (formula "5") (term "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "closeTrue" (formula "5"))
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "5"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_leqRight" (formula "4"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "greater_equal_than_comparison_simple" (formula "5") (term "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "methodCallEmpty" (formula "5") (term "1"))
      (rule "emptyModality" (formula "5") (term "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "impRight" (formula "5"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "5"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
      (rule "times_zero_1" (formula "2") (term "0,0"))
      (rule "add_zero_left" (formula "2") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "methodCallReturn" (formula "7") (term "1"))
      (rule "assignment" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "methodCallEmpty" (formula "7") (term "1"))
      (rule "tryEmpty" (formula "7") (term "1"))
      (rule "emptyModality" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "3")) (ifInst ""  (formula "1")))
      (rule "allRight" (formula "7") (inst "sk=f_0"))
      (rule "allRight" (formula "7") (inst "sk=o_0"))
      (rule "orRight" (formula "7"))
      (rule "orRight" (formula "7"))
      (rule "eqSymm" (formula "9"))
      (rule "pullOutSelect" (formula "9") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
      (rule "eqSymm" (formula "10"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "8"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
