Basically, all necessary manual steps are of the same kind, i.e. instantiate quantified formulas with object instances. In total, this concerns five proofs.

=== eVotingMachine.core.Setup(eVotingMachine.core.Setup__computeResult([I,int)).normal contract.0.proof ===
Run auto mode, then when the prover stops instantiate the formula
"∀ Object o; (o = null ∨ o = x_arr_2 ∨ o.<created> = TRUE ∨ ¬o.<created>@anon_heap_LOOP = TRUE)" on all (three) open branches with the object instance in the antecedent and subsequently again run the auto mode once more.

=== utils.MessageTools(utils.MessageTools__concatenate([B,[B)).contract.0.proof ===
Run auto mode, then when the prover stops instantiate on each open branch the following formulas (or a subset of them, if some are not there)
"∀ Object o; (o = null ∨ o = result_0 ∨ o = x_arr_2 ∨ o.<created> = TRUE ∨ ¬o.<created>@anon_heap_LOOP = TRUE)",
"∀ Object o; (o = null ∨ o = result_0 ∨ o = x_arr_2 ∨ o.<created> = TRUE ∨ ¬o.<created>@anon_heap_intToByteArray = TRUE)",
"∀ Object o; (o = null ∨ o = result_0 ∨ o = x_arr_2 ∨ o.<created> = TRUE ∨ ¬o.<created>@anon_heap_LOOP_0 = TRUE)",
"∀ Object o; (o = null ∨ o = result_0 ∨ o = x_arr_2 ∨ o.<created> = TRUE ∨ ¬o.<created>@anon_heap_LOOP_1 = TRUE)" with the object instance in the antecedent and subsequently again run the auto mode once more.

=== utils.MessageTools(utils.MessageTools__copyOf([B)).normal contract.0.proof ===
Run auto mode, then when the prover stops instantiate the formula
"∀ Object o; (o = null ∨ o = x_arr_2 ∨ o.<created> = TRUE ∨ ¬o.<created>@anon_heap_LOOP = TRUE)" on all (two) open branches with the object instance in the antecedent and subsequently again run the auto mode once more.

=== utils.MessageTools(utils.MessageTools__longToByteArray(long)).normal contract.0.proof ===
Run auto mode, then when the prover stops instantiate the formula
"∀ Object o; (o = null ∨ o = x_arr_2 ∨ o.<created> = TRUE ∨ ¬o.<created>@anon_heap_LOOP = TRUE)" on all (two) open branches with the object instance in the antecedent and subsequently again run the auto mode once more.

=== utils.MessageTools(utils.MessageTools__project([B,int)).normal contract.0.proof ===
Finish symbolic execution
Heap Simplification
Two left with complex antecedent
Propositional expansion (w/ splits)
Heap simplification
Auto mode on all branches with no object instance in antecedent
Then instantiate the following formulas with the remaining object instances:
"∀ Object o; (o = null ∨ o = x_arr_43 ∨ o.<created> = TRUE ∨ ¬o.<created>@anon_heap_LOOP_0 = TRUE)",
"∀ Object o; (o = null ∨ o = x_arr_32 ∨ o.<created> = TRUE ∨ ¬o.<created>@anon_heap_LOOP = TRUE)" and finally run auto mode once.
